chapter 7. rise graph databas one hand we ’ re produc data mass scale , prompt like googl , amazon , facebook come intellig way deal thi , hand we ’ re face data that ’ s becom interconnect ever . graph network pervas live . present sever motiv exampl , hope teach reader recogn graph problem reveal itself . chapter we ’ ll look leverag connect they ’ re worth use graph databas , demonstr use neo4j , popular graph databas . 7.1 . introduc connect data graph databas let ’ s start familiar concept connect data represent graph data . connect data —a name indic , connect data character fact data hand relationship make connect . graph —often refer sentenc connect data . graph well suit repres connect data meaning way . graph databas —introduc chapter 6. reason subject merit particular attent becaus , besid fact data increas size , it ’ s also becom interconnect . much effort need come well-known exampl connect data . promin exampl data take network form social media data . social media allow us share exchang data network , therebi gener great amount connect data . illustr simpl exampl . let ’ s assum two peopl data , user1 user2 . furthermor , know first name last name user1 ( first name : paul last name : beun ) user2 ( first name : jelm last name : ragnar ) . natur way repres could draw whiteboard , shown figur 7.1.the terminolog figur 7.1 describ below : entiti —we two entiti repres peopl ( user1 user2 ) . entiti properti “ name ” “ lastnam ” . properti —the properti defin key-valu pair . graph also infer user1 “ name ” properti paul know user2 “ name ” properti jelm . relationship —thi relationship paul jelm . note relationship direct : it ’ s paul “ know ” jelm way around . user1 user2 repres peopl could therefor group . label —in graph databas , one group node use label . user1 user2 could case label “ user ” . connect data often contain mani entiti connect . figur 7.2 see extens graph . two entiti includ : country1 name cambodia country2 name sweden . two relationship exist : “ has_been_in ” “ is_born_in ” . previou graph , entiti includ properti , relationship also contain properti . graph known properti graph . relationship connect node user1 country1 type “ has_been_in ” properti “ date ” repres data valu . similarli , user2 connect country2 differ type relationship , type “ is_born_in ” . note type relationship provid us context relationship node . node multipl relationship . figur 7.2. complic connect data exampl two entiti includ ( country1 country2 ) two new relationship ( “ has_been_in ” “ is_born_in ” ) kind represent data give us intuit way store connect data . explor data need travers graph follow predefin path find pattern we ’ re search for . one would like know paul been ? translat graph databas terminolog , we ’ d like find pattern “ paul in. ” answer thi , we ’ d start node name “ paul ” travers cambodia via relationship “ has_been_in ” . henc graph travers , correspond databas queri , would follow : 1. start node—in case node name properti “ paul ” 2. travers path—in case path start node paul go cambodia 3 . end node—countri node name properti “ cambodia ” better understand graph databas deal connect data , it ’ s appropri expand bit graph gener . graph extens studi domain comput scienc mathemat field call graph theori . graph theori studi graph , graph repres mathemat structur use model pairwis relat object , shown figur 7.3. make appeal structur lend visual connect data . graph defin vertic ( also known node graph databas world ) edg ( also known relationship ) . concept form basic fundament graph data structur base . figur 7.3. core graph consist node ( also known vertic ) edg ( that connect vertic ) , known mathemat definit graph . collect object repres graph . compar data structur , distinct featur connect data nonlinear natur : entiti connect via varieti relationship type intermedi entiti path . graph , make subdivis direct undirect graph . edg direct graph have—how could otherwise—a direct . although one could argu everi problem could somehow repres graph problem , it ’ s import understand it ’ s ideal it ’ s not . 7.1.1. use graph databas ? quest determin graph databas one use could involv process undertak . one import aspect decis make process find right represent data . sinc earli 1970 common type databas one reli relat one . later , other emerg , hierarch databas ( for exampl , im ) , graph databas ’ s closest rel : network databas ( for exampl , idm ) . last decad landscap becom much divers , give end-us choic depend specif need . consid recent develop data that ’ s becom avail , two characterist well suit highlight here . first one size data complex data , shown figur 7.4 . figur 7.4. figur illustr posit graph databas two dimension space one dimens repres size data one deal with , dimens repres complex term connect data is . relat databas longer cope complex data set connected , size , graph databas may best option . figur 7.4 indic , we ’ ll need reli graph databas data complex still small . though “ small ” rel thing here , we ’ re still talk hundr million node . handl complex main asset graph databas ultim “ whi ” you ’ d use it . explain kind complex meant here , first think tradit relat databas work . contrari name relat databas indic , much relat except foreign key primari key relat tabl . contrast , relationship graph databas first-class citizen . aspect , lend well model queri connect data . relat databas would rather strive minim data redund . process known databas normal , tabl decompos smaller ( less redund ) tabl maintain inform intact . normal databas one need conduct chang attribut one tabl . aim process isol data chang one tabl . relat databas manag system ( rdbm ) good choic databas data fit nice tabular format . relationship data express join tabl . fit start downgrad join becom complic , especi becom many-to-mani join . queri time also increas data size start increas , maintain databas challeng . factor hamper perform databas . graph databas , hand , inher store data node relationship . although graph databas classifi nosql type databas , trend present categori right exist . one seek justif note type nosql databas aggregation-ori , graph databas aren ’ t . relat databas might , exampl , tabl repres “ peopl ” properti . person relat peopl kinship ( and friendship , on ) ; row might repres person , connect row peopl tabl would immens difficult job . add variabl hold uniqu identifi first child extra one hold id second child ? stop ? tenth child ? altern would use intermedi tabl child-par relationship , you ’ ll need separ one relationship type like friendship . last case don ’ t get column prolifer tabl prolifer : one relationship tabl type relationship . even somehow succeed model data way famili relat present , you ’ ll need difficult queri get answer simpl question “ i would like grandson john mcbain. ” first need find john mcbain ’ s children . find children , need find their . time found grandson , hit “ peopl ” tabl three time : 1 . find mcbain fetch children . 2 . look children id got get id children . 3 . find grandson mcbain . figur 7.5 show recurs lookup relat databas necessari get john mcbain grandson everyth singl tabl . figur 7.5 . recurs lookup version 1 : data one tabl figur 7.6 anoth way model data : parent-child relationship separ tabl . figur 7.6 . recurs lookup version 2 : use parent-child relationship tabl recurs lookup ineffici , say least . graph databas shine type complex aris . let ’ s look popular among them . 7.2 . introduc neo4j : graph databas connect data gener store graph databas . databas specif design cope structur connect data . landscap avail graph databas rather divers day . three most-known one order decreas popular neo4j , orientdb , titan . showcas case studi we ’ ll choos popular one moment write ( see http : //db-engines.com/en/ranking/graph+dbm , septemb 2015 ) . neo4j graph databas store data graph contain node relationship ( both allow contain properti ) . type graph databas known properti graph well suit store connect data . flexibl schema give us freedom chang data structur need , provid us abil add new data new relationship need . it ’ s open sourc project , matur technolog , easi instal , user-friendli , well document . neo4j also browser-bas interfac facilit creation graph visual purpos . follow along , would right moment instal neo4j . neo4j download http : //neo4j.com/download/ . necessari step success instal summar appendix c. let ’ s introduc four basic structur neo4j : node —repres entiti document , user , recip , on . certain properti could assign node . relationship —exist differ node . access either stand-alon node they ’ re attach to . relationship also contain properti , henc name properti graph model . everi relationship name direct , togeth provid semant context node connect relationship . properti —both node relationship properti . properti defin key-valu pair . label —can use group similar node facilit faster travers graph . conduct analysi , good habit design databas care fit queri you ’ d like run road perform analysi . graph databas pleasant characterist they ’ re whiteboard friendli . one tri draw problem set whiteboard , draw close resembl databas design defin problem . therefor , whiteboard draw would good start point design databas . retriev data ? explor data , need travers graph follow predefin path find pattern we ’ re search for . neo4j browser ideal environ creat play around connect data get right kind represent optim queri , shown figur 7.7. flexibl schema graph databas suit us well here . browser retriev data row graph . neo4j queri languag eas creation queri capabl graph . figur 7.7 . neo4j 2.2.5 interfac resolv queri chapter case studi cypher highli express languag share enough sql enhanc learn process languag . follow section , we ’ ll creat data use cypher insert neo4j . play around data . 7.2.1 . cypher : graph queri languag let ’ s introduc cypher basic syntax graph oper . idea section present enough cypher get us start use neo4j browser . end section abl creat connect data use cypher neo4j browser run basic queri retriev result queri . extens introduct cypher visit http : //neo4j.com/docs/stable/cypher-query-lang.html . we ’ ll start draw simpl social graph accompani basic queri retriev predefin pattern exampl . next step we ’ ll draw complex graph allow us use complic queri cypher . help us get acquaint cypher move us path bring use case realiti . moreov , we ’ ll show creat simul connect data use cypher . figur 7.8 show simpl social graph two node , connect relationship type “ know ” . node properti “ name ” “ lastnam ” . figur 7.8. exampl simpl social graph two user one relationship now , we ’ d like find follow pattern , “ who paul know ? ” we ’ d queri use cypher . find pattern cypher , we ’ ll start match claus . queri we ’ ll start search node user name properti “ paul ” . note node enclos within parenthes , shown code snippet below , relationship enclos squar bracket . relationship name colon ( : ) prefix , direct describ use arrow . placehold p2 contain user node relationship type “ know ” inbound relationship . return claus retriev result queri . 1 2 match ( p1 : user { name : 'paul ' } ) - [ : know ] - > ( p2 : user ) return p2.name copi notic close relationship formul question verbal way graph databas translat travers . neo4j , impress express made possibl graph queri languag , cypher . make exampl interest , let ’ s assum data repres graph figur 7.9 . figur 7.9. complic connect data exampl sever interconnect node differ type insert connect data figur 7.9 neo4j use cypher . write cypher command directli browser-bas interfac neo4j , altern python driver ( see http : //neo4j.com/developer/python/ overview ) . good way get hands-on feel connect data graph databas . write appropri creat statement cypher , first good understand data we ’ d like store node relationship , properti be , whether label would use . first decis decid data regard node relationship provid semant context node . figur 7.9 we ’ ve chosen repres user countri node . data provid inform specif node , exampl name that ’ s associ node , repres properti . data provid context two node consid relationship . node share common featur , exampl cambodia sweden countri , also group label . figur 7.9 alreadi done . follow list demonstr differ object could encod cypher one big creat statement . awar cypher case sensit . list 7.1 . cypher data creation statement creat ( user1 : user { name : 'ann ' } ) , ( user2 : user { name : 'paul ' , lastnam : 'beun ' } ) , ( user3 : user { name : 'muhuba ' } ) , ( user4 : user { name : 'jelm ' , lastnam : 'ragnar ' } ) , ( country1 : countri { name : 'mongolia ' } ) , ( country2 : countri { name : 'cambodia ' } ) , ( country3 : countri { name : 'new zealand ' } ) , ( country4 : countri { name : 'sweden ' } ) , ( food1 : food { name : 'sushi ' } ) , ( hobby1 : hobbi { name : 'travel ' } ) , ( user1 ) - [ : has_been_in ] - > ( country1 ) , ( user1 ) - [ : has_been_in ] - > ( country2 ) , ( user1 ) - [ : has_been_in ] - > ( country3 ) , ( user2 ) - [ : has_been_in ] - > ( country2 ) , ( user1 ) - [ : is_mother_of ] - > ( user4 ) , ( user2 ) - [ : know ] - > ( user4 ) , ( user1 ) - [ : is_friend_of ] - > ( user3 ) , ( user2 ) - [ : like ] - > ( food1 ) , ( user3 ) - [ : like ] - > ( food1 ) , ( user4 ) - [ : is_born_in ] - > ( country4 ) run creat statement one go advantag success execut ensur us graph databas success creat . error exist , graph won ’ t creat . real scenario , one also defin index constraint ensur fast lookup search entir databas . haven ’ t done simul data set small . howev , easili done use cypher . consult cypher document find index constraint ( http : //neo4j.com/docs/stable/cypherdoc-labels-constraints-and-indexes.html ) . we ’ ve creat data , queri it . follow queri return node relationship databas : figur 7.10 show databas we ’ ve creat . compar graph graph we ’ ve envis whiteboard . whiteboard group node peopl label “ user ” node countri label “ countri ” . although node figur aren ’ t repres label , label present databas . besid that , also miss node ( hobbi ) relationship type “ love ” . easili ad merg statement creat node relationship don ’ t exist alreadi : figur 7.10. graph drawn figur 7.9 creat neo4j web interfac . node aren ’ t repres label name . infer graph we ’ re miss label hobbi name travel . reason forgotten includ node correspond relationship creat statement . merg ( user3 ) - [ : love ] - > ( hobby1 ) copi ask mani question here . exampl : question 1 : countri ann visit ? cypher code creat answer ( shown figur 7.11 ) match ( u : user { name : 'ann ' } ) – [ : has_been_in ] - > ( c : countri ) return u.nam , c.name copi question 2 : where ? cypher code ( explain figur 7.12 ) match ( ) - [ r : has_been_in ] - > ( ) return r limit 25 figur 7.13 . result question 2 : where ? result travers shown graph represent neo4j . see paul , addit ann , also cambodia . question 2 chosen specifi start node . therefor , cypher go node present databas find outgo relationship type “ has_been_in ” . one avoid specifi start node sinc , depend size databas , queri could take long time converg . play around data obtain right graph databas also mean lot data delet . cypher delet statement suitabl delet small amount data . follow queri demonstr delet node relationship databas : match ( n ) option match ( n ) - [ r ] - ( ) delet n , r we ’ re acquaint connect data basic knowledg it ’ s manag graph databas , go step look real , live applic connect data . social graph , exampl , use find cluster tightli connect node insid graph commun . peopl cluster don ’ t know introduc other . concept search tightli connect node , node signific amount featur common , wide use concept . next section we ’ ll use idea , aim find cluster insid ingredi network . 7.3 . connect data exampl : recip recommend engin one popular use case graph databas develop recommend engin . recommend engin becam wide adopt promis creat relev content . live era abund data overwhelm mani consum . enterpris saw clear need invent attract custom person content , therebi use strength recommend engin . case studi we ’ ll recommend recip base dish prefer user network ingredi . data prepar we ’ ll use elasticsearch quicken process allow focu actual graph databas . main purpos replac ingredi list “ dirti ” download data ingredi “ clean ” list . skip ahead chapter , might good least read appendix instal elasticsearch run comput . alway download index we ’ ll use man download page chapter past local elasticsearch data directori don ’ t feel like bother chapter 6 case studi . download follow inform man websit chapter : three .pi code file .ipynb counterpart data prepar part 1 —will upload data elasticsearch ( altern past download index local elasticsearch data folder ) data prepar part 2 —will move data elasticsearch neo4j explor & recommend system three data file ingredi ( .txt ) —self-compil ingredi file recip ( .json ) —contain ingredi elasticsearch index ( .zip ) —contain “ gastronom ” elasticsearch index use skip data prepar part 1 everyth need , let ’ s look research goal step need take achiev it . 7.3.1 . step 1 : set research goal let ’ s look what ’ s come follow data scienc process ( figur 7.14 ) . figur 7.14 . data scienc process overview appli connect data recommend model primari goal set recommend engin would help user cook websit find right recip . user get like sever recip we ’ ll base dish recommend ingredi ’ overlap recip network . simpl intuit approach , yet alreadi yield fairli accur result . let ’ s look three data element requir . 7.3.2 . step 2 : data retriev exercis requir three type data : recip respect ingredi list distinct ingredi like model least one user prefer certain dish alway , divid intern avail creat data extern acquir data . intern data —we don ’ t user prefer ingredi lie around , smallest part data easili creat . manual input prefer enough creat recommend . user get interest accur result feedback give . we ’ ll input user prefer later case studi . list ingredi manual compil remain relev year come , feel free use list download materi purpos , commerci otherwis . extern data —recip differ matter . thousand ingredi exist , combin million dish . luck , howev , pretti big list freeli avail http : //github.com/fictivekin/openrecip . mani thank fictiv kin valuabl data set hundr thousand recip . sure duplic here , won ’ t hurt use case badli . two data file dispos : list 800+ ingredi ( ingredients.txt ) hundr thousand recip recipes.json file . sampl ingredi list seen follow list . list 7.2 . ingredi list text file sampl ditalini egg noodl farfal fettuccin fusilli lasagna linguin macaroni orzo copi “ openrecip ” json file contain hundr thousand recip multipl properti publish date , sourc locat , prepar time , descript , on . we ’ re interest name ingredi list . sampl recip shown follow list . list 7.3. sampl json recip { `` _id '' : { `` $ oid '' : `` 5160756b96cc62079cc2db15 '' } , `` name '' : `` drop biscuit sausag gravi '' , `` ingredi '' : `` biscuits\n3 cup all-purpos flour\n2 tablespoon bake powder\n1/2 teaspoon salt\n1-1/2 stick ( 3/4 cup ) cold butter , cut pieces\n1-1/4 cup butermilk\n sausag gravy\n1 pound breakfast sausag , hot mild\n1/3 cup all-purpos flour\n4 cup whole milk\n1/2 teaspoon season salt\n2 teaspoon black pepper , tast '' , `` url '' : `` http : //thepioneerwoman.com/cooking/2013/03/drop-biscuits-and- sausage-gravy/ '' , `` imag '' : `` http : //static.thepioneerwoman.com/cooking/files/2013/03/ bisgrav.jpg '' , `` ts '' : { `` $ date '' : 1365276011104 } , `` cooktim '' : `` pt30m '' , `` sourc '' : `` thepioneerwoman '' , `` recipeyield '' : `` 12 '' , `` datepublish '' : `` 2013-03-11 '' , `` preptim '' : `` pt10m '' , `` descript '' : `` late saturday afternoon , marlboro man return home soccer-play girl , return home the ... '' } we ’ re deal text data here , problem two-fold : first , prepar textual data describ text mine chapter . then , data thoroughli cleans , use produc recip recommend base network ingredi . chapter doesn ’ t focu text data prepar describ elsewher , we ’ ll allow luxuri shortcut upcom data prepar . 7.3.3 . step 3 : data prepar two data file dispos , need combin one graph databas . “ dirti ” recip data pose problem address use clean ingredi list use search engin nosql databas elasticsearch . alreadi reli elasticsearch previou chapter clean recip data us implicitli creat index . search data link ingredi everi recip occur . could clean text data use pure python , text mine chapter , show it ’ s good awar strong point nosql databas ; don ’ t pin singl technolog , use togeth benefit project . let ’ s start enter recip data elasticsearch . don ’ t understand what ’ s happen , pleas check case studi chapter 6 becom clear . make sure turn local elasticsearch instanc activ python environ elasticsearch modul instal run code snippet follow list . it ’ s recommend run code “ as is ” ipython ( or jupyt ) print everi recip key screen browser handl much output . either turn print statement run anoth python ide . code snippet found “ data prepar part 1.pi ” . list 7.4 . import recip data elasticsearch everyth went well , elasticsearch index name “ gastronom ” popul thousand recip . notic allow duplic recip assign name recip document key . if , instanc , recip call “ lasagna ” salmon lasagna , beef lasagna , chicken lasagna , type . singl recip select prototyp lasagna ; upload elasticsearch name : “ lasagna ” . choic , feel free decid otherwis . signific impact , we ’ ll see later on . door open systemat upload local graph databas . make sure local graph databas instanc turn appli follow code . usernam databas default neo4j password neo4ja ; make sure adjust local setup . we ’ ll also requir neo4j-specif python librari call py2neo . haven ’ t alreadi , would time instal virtual environ use pip instal py2neo conda instal py2neo use anaconda . again , advis code crash browser run directli ipython jupit . code list found “ data prepar part 2.pi ” . list 7.5 . use elasticsearch index fill graph databas great , we ’ re proud owner graph databas fill recip ! it ’ s time connect data explor . 7.3.4 . step 4 : data explor data want it , manual explor use neo4j interfac http : //localhost:7474/browser/ . noth stop run cypher code environ , cypher also execut via py2neo librari . one interest question pose ingredi occur recip ? like get digest system randomli select ate dish databas ? py2neo import graph , authent , node , relationship authent ( `` localhost:7474 '' , `` user '' , `` password '' ) graph_db = graph ( `` http : //localhost:7474/db/data/ '' ) graph_db.cypher.execut ( `` match ( rec : recip ) - [ r : contain ] - > ( ing : ingredi ) ing , count ( r ) num return ing.nam name , num order num desc limit 10 ; '' ) queri creat cypher say : recip ingredi , count number relat per ingredi return ten ingredi relat respect count . result shown figur 7.15 . figur 7.15 . top 10 ingredi occur recip top 10 list figur 7.15 shouldn ’ t come surpris . salt proudli top list , shouldn ’ t shock find vascular diseas number one killer western countri . anoth interest question come mind differ perspect : recip requir ingredi ? py2neo import graph , node , relationship graph_db = graph ( `` http : //neo4j : neo4ja @ localhost:7474/db/data/ '' ) graph_db.cypher.execut ( `` match ( rec : recip ) - [ r : contain ] - > ( ing : ingredi ) rec , count ( r ) num return rec.nam name , num order num desc limit 10 ; '' ) copi queri almost befor , instead return ingredi , demand recip . result figur 7.16 . figur 7.16 . top 10 dish creat greatest divers ingredi might surpris sight . spaghetti bolognes hardli sound like type dish would requir 59 ingredi . let ’ s take closer look ingredi list spaghetti bolognes . py2neo import graph , node , relationship graph_db = graph ( `` http : //neo4j : neo4ja @ localhost:7474/db/data/ '' ) graph_db.cypher.execut ( `` match ( rec1 : recip { name : 'spaghetti bolognes ' } ) - [ r : contain ] - > ( ing : ingredi ) return rec1.nam , ing.nam ; '' ) cypher queri mere list ingredi link spaghetti bolognes . figur 7.17 show result neo4j web interfac . figur 7.17 . spaghetti bolognes possibl ingredi let ’ s remind remark made index data elasticsearch . quick elasticsearch search spaghetti bolognes show us occur multipl time , instanc use link ingredi spaghetti bolognes recip . don ’ t look spaghetti bolognes singl recip collect way peopl creat “ spaghetti bolognese. ” make interest way look data . peopl creat version dish ketchup , red wine , chicken might even add soup . “ spaghetti bolognes ” dish open interpret , wonder mani peopl love it . spaghetti bolognes stori interest distract came for . it ’ s time recommend dish gourmand “ ragnar ” . 7.3.5 . step 5 : data model knowledg data slightli enrich , get goal exercis : recommend . introduc user call “ ragnar , ” like coupl dish . new inform need absorb graph databas expect suggest new dish . therefor , let ’ s creat ragnar ’ s user node recip prefer . list 7.6 . creat user node like certain recip neo4j graph databas list 7.6 food connoisseur ragnar ad databas along prefer dish . select ragnar neo4j interfac , get figur 7.18 . cypher queri figur 7.18. user ragnar like sever dish match ( u : user ) - [ r : like ] - > ( rec : recip ) return u , rec limit 25 copi surpris figur 7.18 : mani peopl like spaghetti bolognes , scandinavian gastronomist ragnar . simpl recommend engin like build , that ’ s left us ask graph databas give us nearest dish term ingredi . again , basic approach recommend system doesn ’ t take account factor dislik ingredi dish . amount like dislik . score 10 instead binari like don ’ t like could make differ . amount ingredi present dish . threshold certain ingredi becom appar tast . certain ingredi , spici pepper , repres bigger impact smaller dose ingredi would . food allergi . implicitli model like dislik dish certain ingredi , food allergi import singl mistak fatal . avoid allergen overwrit entir recommend system . mani thing ponder about . might come bit surpris , singl cypher command suffic . py2neo import graph , node , relationship graph_db = graph ( `` http : //neo4j : neo4ja @ localhost:7474/db/data/ '' ) graph_db.cypher.execut ( `` match ( usr1 : user { name : 'ragnar ' } ) - [ l1 : like ] - > ( rec1 : recip ) , ( rec1 ) - [ c1 : contain ] - > ( ing1 : ingredi ) ing1 , rec1 match ( rec2 : recip ) - [ c2 : contain ] - > ( ing1 : ingredi ) rec1 < > rec2 return rec2.nam , count ( ing1 ) ingcount order ingcount desc limit 20 ; '' ) copi first recip ragnar like collect . ingredi use fetch dish share them . ingredi count connect dish rank mani common ingredi few . top 20 dish kept ; result tabl figur 7.19 . figur 7.19 . output recip recommend ; top 20 dish user may love figur 7.19 deduc it ’ s time ragnar tri spaghetti meatbal , dish made immort famou disney anim ladi tramp . sound like great recommend somebodi fond dish contain pasta meatbal , see ingredi count , mani ingredi back suggest . give us small hint what ’ s behind it , show prefer dish , top recommend , overlap ingredi singl summari graph imag . 7.3.6 . step 6 : present neo4j web interfac allow us run model retriev nice-look graph summar part logic behind recommend . show recommend dish link prefer dish via ingredi . shown figur 7.20 final output case studi . figur 7.20 . interconnected user-pref dish top 10 recommend dish via sub-select overlap ingredi beauti graph imag conclud chapter knowledg ragnar tasti dish look forward to . don ’ t forget tri recommend system insert prefer . 7.4 . summari chapter learn graph databas especi use encount data relationship entiti import entiti themselv . compar nosql databas , handl biggest complex least data . graph data structur consist two main compon : node —these entiti themselv . case studi , recip ingredi . edg —the relationship entiti . relationship , like node , kind type ( for exampl “ contain , ” “ like , ” “ ha to ” ) specif properti name , weight , measur . look neo4j , current popular graph databas . instruct instal it , consult appendix b. look ad data neo4j , queri use cypher , access web interfac . cypher neo4j database-specif queri languag , look exampl . also use case studi part dish recommend system . chapter ’ s case studi made use elasticsearch clean huge recip data dump . convert data neo4j databas recip ingredi . goal case studi recommend dish peopl base previous shown interest dish . made use connected recip via ingredi . py2neo librari enabl us commun neo4j server python . turn graph databas use implement recommend system also data explor . one thing found divers ( ingredient-wis ) spaghetti bolognes recip there . use neo4j web interfac creat visual represent get dish prefer dish recommend via ingredi node . sitemap prev chapter